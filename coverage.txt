============================= test session starts ==============================
platform darwin -- Python 3.10.9, pytest-8.1.1, pluggy-1.4.0
rootdir: /Users/ujandasgupta/Desktop/Applied ML/try
plugins: cov-4.1.0, anyio-3.6.2
collected 7 items

test.py FF.F.F.                                                          [100%]

=================================== FAILURES ===================================
________________ TestScoreFunction.test_obvious_non_spam_input _________________

self = <test.TestScoreFunction testMethod=test_obvious_non_spam_input>

    def test_obvious_non_spam_input(self):
        # Test if an obvious non-spam input text results in prediction as False
        text = self.test_df.iat[3, 0]
       # print(f"{text}")
        prediction, _ = score(text, self.loaded_model, 0.5)
>       self.assertFalse(prediction)
E       AssertionError: True is not false

test.py:61: AssertionError
__________________ TestScoreFunction.test_obvious_spam_input ___________________

self = <test.TestScoreFunction testMethod=test_obvious_spam_input>

    def test_obvious_spam_input(self):
        # Test if an obvious spam input text results in prediction as True
        text = self.test_df.iat[2, 0]
        prediction, _ = score(text, self.loaded_model, 0.5)
>       self.assertTrue(prediction)
E       AssertionError: False is not true

test.py:54: AssertionError
___________________ TestScoreFunction.test_propensity_range ____________________

self = <test.TestScoreFunction testMethod=test_propensity_range>

    def test_propensity_range(self):
        # Check if propensity score is between 0 and 1
        r = random.randint(0, len(self.test_df) - 1)
        text = self.test_df.iat[r, 0]
        _, propensity = score(text, self.loaded_model, 0.5)
>       self.assertTrue(0 <= propensity <= 1)
E       AssertionError: False is not true

test.py:34: AssertionError
____________________ TestScoreFunction.test_threshold_zero _____________________

self = <test.TestScoreFunction testMethod=test_threshold_zero>

    def test_threshold_zero(self):
        # Test if setting the threshold to 0 always produces prediction as True
        r = random.randint(0, len(self.test_df) - 1)
        text = self.test_df.iat[r, 0]
        prediction, _ = score(text, self.loaded_model, 0.0)
>       self.assertTrue(prediction)
E       AssertionError: False is not true

test.py:41: AssertionError
=============================== warnings summary ===============================
test.py::TestScoreFunction::test_obvious_non_spam_input
test.py::TestScoreFunction::test_obvious_non_spam_input
test.py::TestScoreFunction::test_obvious_spam_input
test.py::TestScoreFunction::test_prediction_values
test.py::TestScoreFunction::test_propensity_range
test.py::TestScoreFunction::test_threshold_one
test.py::TestScoreFunction::test_threshold_zero
  /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/sklearn/base.py:376: InconsistentVersionWarning: Trying to unpickle estimator TfidfTransformer from version 1.2.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
  https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
    warnings.warn(

test.py::TestScoreFunction::test_obvious_non_spam_input
test.py::TestScoreFunction::test_obvious_non_spam_input
test.py::TestScoreFunction::test_obvious_spam_input
test.py::TestScoreFunction::test_prediction_values
test.py::TestScoreFunction::test_propensity_range
test.py::TestScoreFunction::test_threshold_one
test.py::TestScoreFunction::test_threshold_zero
  /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/sklearn/base.py:376: InconsistentVersionWarning: Trying to unpickle estimator TfidfVectorizer from version 1.2.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
  https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
    warnings.warn(

test.py::TestScoreFunction::test_obvious_non_spam_input
test.py::TestScoreFunction::test_obvious_non_spam_input
test.py::TestScoreFunction::test_obvious_spam_input
test.py::TestScoreFunction::test_prediction_values
test.py::TestScoreFunction::test_propensity_range
test.py::TestScoreFunction::test_threshold_one
test.py::TestScoreFunction::test_threshold_zero
  /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/sklearn/base.py:376: InconsistentVersionWarning: Trying to unpickle estimator SGDClassifier from version 1.2.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
  https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
    warnings.warn(

test.py::TestScoreFunction::test_obvious_non_spam_input
test.py::TestScoreFunction::test_obvious_non_spam_input
test.py::TestScoreFunction::test_obvious_spam_input
test.py::TestScoreFunction::test_prediction_values
test.py::TestScoreFunction::test_propensity_range
test.py::TestScoreFunction::test_threshold_one
test.py::TestScoreFunction::test_threshold_zero
  /Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/sklearn/base.py:376: InconsistentVersionWarning: Trying to unpickle estimator Pipeline from version 1.2.2 when using version 1.4.1.post1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
  https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
    warnings.warn(

test.py::TestScoreFunction::test_obvious_non_spam_input
test.py::TestScoreFunction::test_obvious_spam_input
test.py::TestScoreFunction::test_prediction_values
test.py::TestScoreFunction::test_propensity_range
test.py::TestScoreFunction::test_threshold_one
test.py::TestScoreFunction::test_threshold_zero
  /Users/ujandasgupta/Desktop/Applied ML/try/score.py:28: RuntimeWarning: invalid value encountered in scalar divide
    propensity = (decision_score - decision_score.min()) / (decision_score.max() - decision_score.min())

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html

---------- coverage: platform darwin, python 3.10.9-final-0 ----------
Name       Stmts   Miss  Cover   Missing
----------------------------------------
app.py        16     16     0%   1-19
score.py      15      0   100%
test.py       62      1    98%   93
----------------------------------------
TOTAL         93     17    82%

=========================== short test summary info ============================
FAILED test.py::TestScoreFunction::test_obvious_non_spam_input - AssertionErr...
FAILED test.py::TestScoreFunction::test_obvious_spam_input - AssertionError: ...
FAILED test.py::TestScoreFunction::test_propensity_range - AssertionError: Fa...
FAILED test.py::TestScoreFunction::test_threshold_zero - AssertionError: Fals...
================== 4 failed, 3 passed, 34 warnings in 11.61s ===================
